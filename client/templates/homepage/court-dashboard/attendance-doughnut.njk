{% macro attendanceDoughnut(params) %}

  {% set expectedColour = '#B1B4B6' %}
  {% set checkedInColour = '#1D70B8' %}
  {% set onTrialsColour = '#B58840' %}
  {% set notCheckedInColour = '#F3F2F1' %}

  <div class="pool-record-chart">
    <div class="pool-record-chart__chart-canvas">
      <div class="total">
        <span class="number">{{ params.values.expected }}</span>
        <span class="legend">expected</span>
      </div>
      <canvas id="{{params.id}}Chart" name="{{params.id}}Chart" width="170" height="170"></canvas>
    </div>
    <div class="pool-record-chart__legend">
      <div class="legend">
        <div class="bullet required"></div>Expected today <span class="amount">{{ params.values.expected }}</span>
      </div>
      <div class="divider"></div>
      <div class="legend">
        <div class="bullet available"></div>Checked-in <span class="amount">{{ params.values.checkedIn }}</span>
      </div>
      <div class="legend">
        <div class="bullet unavailable"></div>On trials <span class="amount">{{ params.values.onTrials }}</span>
      </div>
      <div class="legend">
        <div class="bullet unresolved"></div>Not checked-in <span class="amount">{{ params.values.notCheckedIn }}</span>
      </div>
      {# <div class="divider"></div>
      <div class="legend">
        <div class="bullet surplus"></div>Surplus <span class="amount">{{ params.values.surplus }}</span>
      </div> #}
    </div>
  </div>

  <script nonce="{{ params.nonce }}">
    // to maintain the colours structure this "indexing" order cannot be changed
    // when using the macro, values can be send in any order the developer feels like because they get organised here
    let checkedIn, expected, onTrials, surplus, notCheckedIn;
    
    checkedIn = {{params.values.checkedIn}};
    expected = {{params.values.expected}};
    onTrials = {{params.values.onTrials}};
    notCheckedIn = {{params.values.notCheckedIn}};
    
    {# if ({{params.values.confirmed}} >= {{params.values.required}}) {  // ∴ exact or surplus (surplus bar and no required)
      required = 0;
      confirmed = {{params.values.required}};
      surplus = {{params.values.confirmed}} - {{params.values.required}};
      notResponded = {{params.values.notResponded}};
    } else { // ∴ deficit (required bar but no surplus)
      required = {{params.values.required}} - {{params.values.confirmed}};
      confirmed = {{params.values.confirmed}};
      surplus = 0;
      notResponded = Math.max(0, ({{params.values.notResponded}} - required));
    } #}

    const remaining = expected - (checkedIn + onTrials + notCheckedIn);

    var statsObject = {
      checkedIn,
      onTrials,
      notCheckedIn,
      remaining
    }


    var valueArr = Object.values(statsObject);
    var ctx = document
      .getElementById('{{params.id}}Chart')
      .getContext('2d');

    var dbChart = new Chart(ctx, {
      type: 'doughnut',
      options: {
        tooltips: {
          enabled: false
        },
        cutoutPercentage: '70'
      },
      data: {
        datasets: [
          {
            data: valueArr,
            backgroundColor: [
              '{{checkedInColour}}', '{{onTrialsColour}}', '{{notCheckedInColour}}'
            ],
            borderWidth: 0,
          }
        ]
      }
    });
  </script>

{% endmacro %}