@startuml court-details

skinparam Style strictuml 
skinparam SequenceMessageAlignment center

participant Actor

''' LOCAL ROUTING
participant CourtDetailsPage <</administration/court-details>>
participant GenericErrorPage <</error>>

''' CONTROLLER AND REQUEST OBJECTS
participant CourtDetailsController <<court-details.controller.js>> #lightyellow
participant CourtDetailsObject <<courtDetailsDAO.get()>> #lightyellow
participant UpdateCourtDetailsObject <<courtDetailsDAO.put()>> #lightyellow
participant CourtroomsObject <<courtroomsDAO.get()>> #lightyellow
participant UpdateCourtroomsObject <<courtroomsDAO.put()>> #lightyellow

''' TEMPLATES
participant CourtDetailsTemplate <</administration/rooms.njk>>
participant ErrorTemplate <<_errors/generic.njk>> #lavender

''' BACKEND CONTROLLER
participant BackendController

Actor -> CourtDetailsPage: click court details tab
CourtDetailsPage -> CourtDetailsController : call court details controller

CourtDetailsController -> CourtDetailsObject : build request object
CourtDetailsObject -> BackendController : send backend request
CourtDetailsObject <- BackendController : ok response
CourtDetailsController <- CourtDetailsObject : resolve request
CourtDetailsController -> CourtroomsObject : build request object
CourtroomsObject -> BackendController : send backend request
CourtroomsObject <- BackendController : ok response
CourtDetailsController <- CourtroomsObject : resolve request

CourtDetailsController -> CourtDetailsTemplate : request and build template
CourtDetailsController <- CourtDetailsTemplate : return HTML
CourtDetailsPage <- CourtDetailsController : return HTML
Actor <- CourtDetailsPage : render HTML

alt Update court details
Actor -> CourtDetailsPage: edit court details
CourtDetailsPage -> CourtDetailsController : call court details controller
CourtDetailsController -> CourtDetailsTemplate : request and build template
CourtDetailsController <- CourtDetailsTemplate : return HTML
CourtDetailsPage <- CourtDetailsController : return HTML
Actor <- CourtDetailsPage : render HTML

Actor -> CourtDetailsPage: click save
CourtDetailsController -> UpdateCourtDetailsObject : build request object
UpdateCourtDetailsObject -> BackendController : send backend request
UpdateCourtDetailsObject <- BackendController : ok response
CourtDetailsController <- UpdateCourtDetailsObject : resolve request

CourtDetailsController -> UpdateCourtroomsObject : build request object
UpdateCourtroomsObject -> BackendController : send backend request
UpdateCourtroomsObject <- BackendController : ok response
CourtDetailsController <- UpdateCourtroomsObject : resolve request
end


alt Failed to fetch courtroom details
    CourtDetailsObject <-- BackendController : error response
    CourtDetailsController <-- CourtDetailsObject : reject requestObject
    CourtDetailsController -> ErrorTemplate : request and build template
    CourtDetailsController <- ErrorTemplate : return HTML
    GenericErrorPage <- CourtDetailsController : return HTML
    Actor <- GenericErrorPage : render error page
end

alt Failed to update courtroom details
    UpdateCourtDetailsObject <-- BackendController : error response
    CourtDetailsController <-- UpdateCourtDetailsObject : reject requestObject
    CourtDetailsController -> ErrorTemplate : request and build template
    CourtDetailsController <- ErrorTemplate : return HTML
    GenericErrorPage <- CourtDetailsController : return HTML
    Actor <- GenericErrorPage : render error page
end
