@startuml enter-expenses
hide unlinked
!include generic-blocks.plantuml

skinparam Style strictuml 
skinparam SequenceMessageAlignment center

participant Actor

''' LOCAL ROUTING
participant ExpenseRecordPage <</juror-management/unpaid-attendance/expense-record/:jurorNumber/:poolNumber>>
participant EnterExpensesPage <</juror-management/expenses/:jurorNumber/:poolNumber/enter-expenses>>
participant LossOverLimitPage <</juror-management/expenses/:jurorNumber/:poolNumber/enter-expenses/loss-over-limit>>
participant TravelOverLimitPage <</juror-management/expenses/:jurorNumber/:poolNumber/enter-expenses/travel-over-limit>>
participant TotalLessThanZeroPage <</juror-management/expenses/:jurorNumber/:poolNumber/enter-expenses/total-less-zero>>
participant GenericErrorPage <</error>>

''' CONTROLLER AND REQUEST OBJECTS
participant ExpenseRecordController <<expense-record.controller.js>> #lightyellow
participant EnterExpensesController <<enter-expenses.controller.js>> #lightyellow
participant ExpenseRecordObject <<getEnteredExpensesDAO.post()>> #lightyellow
participant PostEditedExpensesObject <<postEditedExpensesDAO.post()>> #lightyellow
participant RecalculateSummaryTotalsObject <<postRecalculateSummaryTotalsDAO.post()>> #lightyellow
participant CourtLocationRatesObject <<getCourtLocationRates.get()>> #lightyellow
participant JurorRecordDetailsObject <<jurorRecordDetailsDAO.post()>> #lightyellow

''' TEMPLATES
participant EnterAttendanceExpensesTemplate <<expenses/enter-expenses.njk>> #lavender
participant EnterNonAttendanceExpensesTemplate <<expenses/enter-expenses-non-attendance.njk>> #lavender
participant LossOverLimitTemplate <<expenses/loss-over-limit.njk>> #lavender
participant TravelOverLimitTemplate <<expenses/travel-over-limit.njk>> #lavender
participant TotalLessThanZeroTemplate <<expenses/total-less-than-zero.njk>> #lavender
participant SummaryTemplate <<expenses/_partials/summary.njk>> #lavender
participant RecalculateErrorTemplate <<expenses/_partials/recalculate-error-banner.njk>> #lavender
participant GenericErrorTemplate <<_errors/generic.njk>> #lavender

''' FILTERS AND VALIDATORS
participant ExpenseDetailsValidator

''' BACKEND CONTROLLER
participant BackendController

Actor -> ExpenseRecordPage : click expense date link
ExpenseRecordPage o-> EnterExpensesController : call expense details controller

$genericAPICall(EnterExpensesController, ExpenseRecordObject, GenericErrorTemplate, "Failed to fetch draft expense for juror")
$genericAPICall(EnterExpensesController, JurorRecordDetailsObject, GenericErrorTemplate, "Failed to fetch draft expense for juror")

$renderTemplateToPage(EnterExpensesController, EnterAttendanceExpensesTemplate, EnterExpensesPage)

alt Non-Attendance Day Expense
  $renderTemplateToPage(EnterExpensesController, EnterNonAttendanceExpensesTemplate, EnterExpensesPage)
end

Actor -> EnterExpensesPage : change any of the expense details and click 'Recalculate totals'
EnterExpensesPage -> EnterExpensesController : call enter expenses controller
$callAPIRenderErrorOnForm(EnterExpensesController, RecalculateSummaryTotalsObject, GenericErrorTemplate, "Failed to recalculate the summary totals", RecalculateErrorTemplate, EnterExpensesPage)
$renderTemplateToPage(EnterExpensesController, SummaryTemplate, EnterExpensesPage)

Actor -> EnterExpensesPage : enter expense details and click 'Save and next'
EnterExpensesPage -> EnterExpensesController : call enter expenses controller

$validateInput(EnterExpensesController, ExpenseDetailsValidator, EnterAttendanceExpensesTemplate, EnterExpensesPage)

$genericAPICall(EnterExpensesController, CourtLocationRatesObject, GenericErrorTemplate, "Failed to check if travel is over the limit")

alt Travel value over limit
  $renderTemplateToPage(EnterExpensesController, TravelOverLimitTemplate, TravelOverLimitPage)
  Actor -> TravelOverLimitPage : click 'Pay amount entered'
  TravelOverLimitPage -> EnterExpensesController : call enter expenses controller
end

$genericAPICall(EnterExpensesController, postRecalculateSummaryTotalsDAO, GenericErrorTemplate, "Failed to recalculate the summary totals")

alt Total claim less than zero
  $renderTemplateToPage(EnterExpensesController, TotalLessThanZeroTemplate, TotalLessThanZeroPage)
  Actor -> TotalLessThanZeroPage : click 'Go back'
  TotalLessThanZeroPage ->o EnterExpensesController : call enter expenses controller and return to start of enter expenses flow
end

$genericAPICall(EnterExpensesController, PostEditedExpensesObject, GenericErrorTemplate, "Failed to update a draft expense")

alt Financial loss over limit
  $renderTemplateToPage(EnterExpensesController, LossOverLimitTemplate, LossOverLimitPage)
  Actor -> LossOverLimitPage : click 'Continue'
  LossOverLimitPage ->o EnterExpensesController : call enter expenses controller and return to start of enter expenses flow for next available expense record
end

EnterExpensesController ->o EnterExpensesController : call enter expenses controller and return to start of enter expenses flow for next available expense record

alt No more expense records or user clicks 'Save and back to all days'
  EnterExpensesController -> ExpenseRecordController : call expense record controller
  ExpenseRecordPage <- ExpenseRecordController : rediretct to expense record page
  Actor <- ExpenseRecordPage : render expense record page
end

@enduml