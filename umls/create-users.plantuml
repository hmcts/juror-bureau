@startuml create-user
hide unlinked

!include generic-blocks.plantuml

skinparam Style strictuml 
skinparam SequenceMessageAlignment center

participant Actor

''' LOCAL ROUTING
participant UsersPage <</administration/users/users>>
participant CreateUserPage <</administration/users/create-users/user-details>>
participant CreateUserTypePage <</administration/users/create-users/user-type>>
participant ConfirmUserDetailsPage <</administration/users/create-users/confirm-details>>
participant GenericErrorPage <</error>>

''' CONTROLLER AND REQUEST OBJECTS
participant CreateUsersController <<create-users.controller.js>> #lightyellow
participant CreateUsersObject <<usersDAO.createUser()>> #lightyellow

''' VALIDATORS
participant CreateUsersValidator #Gold

''' TEMPLATES
participant UsersTemplate <</administration/users/users.njk>>
participant CreateUserTemplate <</administration/users/create-users/user-details.njk>>
participant CreateUserTypeTemplate <</administration/users/create-users/user-type.njk>>
participant ConfirmUserDetailsTemplate <</administration/users/create-users/confirm-details.njk>>
participant ErrorTemplate <<_errors/generic.njk>> #lavender

''' BACKEND CONTROLLER
participant BackendController

Actor -> UsersPage: click create user button
UsersPage -> CreateUsersController : call create users controller

$renderTemplateToPage(CreateUsersController, CreateUserTypeTemplate, CreateUserTypePage)

Actor -> CreateUserTypePage: Select user type and click continue
CreateUserTypePage -> CreateUsersController : call create users controller

$validateInput(CreateUsersController, CreateUsersValidator, CreateUserTypeTemplate, CreateUserTypePage, "No user type selected")

$renderTemplateToPage(CreateUsersController, CreateUserTemplate, CreateUserPage)

Actor -> CreateUserPage: enter user details and click continue
CreateUserPage -> CreateUsersController : call create users controller

$validateInput(CreateUsersController, CreateUsersValidator, CreateUserTemplate, CreateUserPage, "Invalid user details")

$renderTemplateToPage(CreateUsersController, ConfirmUserDetailsTemplate, ConfirmUserDetailsPage)

Actor -> ConfirmUserDetailsPage: click confirm
ConfirmUserDetailsPage -> CreateUsersController : call create users controller

$genericAPICall(CreateUsersController, CreateUsersObject, ErrorTemplate, "Failed to create user")

$APIErrorAlt(CreateUsersController, CreateUsersObject, ErrorTemplate, "Email address already in use", ConfirmUserDetailsTemplate, ConfirmUserDetailsPage)

UsersPage <- CreateUsersController : redirect to users page
Actor <- UsersPage : render HTML