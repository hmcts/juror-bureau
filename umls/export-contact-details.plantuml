@startuml export-contact-details
hide unlinked
!include generic-blocks.plantuml

skinparam Style strictuml 
skinparam SequenceMessageAlignment center

participant Actor

''' LOCAL ROUTING
participant MessagingPage <</messaging>>
participant FindContactDetailsPage <</messaging/export-contact-details/details-to-export>>
participant SelectTrialPage <</messaging/export-contact-details/trials>>
participant JurorsListPage <</messaging/export-contact-details/find-contact-details>>
participant DetailsToExportPage <</messaging/export-contact-details/jurors-list>>
participant GenericErrorPage <</error>>

''' CONTROLLER AND REQUEST OBJECTS
participant exportContactDetailsController <<export-contact-details.controller.js>> #lightyellow
participant sendMessagesController <<send-messsages.controller.js>> #lightyellow
participant fetchAllCourts <<fetchAllCourts.get()>> #lightyellow
participant trialsListDAO <<trialsListDAO.post()>> #lightyellow
participant jurorSearchDAO <<jurorSearchDAO.post()>> #lightyellow
participant downloadCSVDAO <<downloadCSVDAO.post()>> #lightyellow


''' TEMPLATES
participant FindContactDetailsTemplate <</messaging/export-contact-details/details-to-export.njk>>
participant SelectTrialTemplate <<messaging/select-trial.njk>>
participant JurorsListTemplate <</messaging/export-contact-details/jurors-list.njk>>
participant DetailsToExportTemplate <</messaging/export-contact-details/details-to-export.njk>>
participant GenericErrorTemplate <<_errors/generic.njk>> #lavender

''' FILTERS AND VALIDATORS
participant exportContactDetailsValidator
participant trialSearchValidator
participant detailsToExportValidator

''' BACKEND CONTROLLER
participant BackendController

Actor -> MessagingPage : click 'export contact details' tab
MessagingPage -> exportContactDetailsController : call page controller

exportContactDetailsController -> fetchAllCourts : build request object
fetchAllCourts -> BackendController : send backend request
fetchAllCourts <- BackendController : ok or error response
exportContactDetailsController <- fetchAllCourts : resolve request

$renderTemplateToPage(exportContactDetailsController, FindContactDetailsTemplate, FindContactDetailsPage)

Actor -> FindContactDetailsPage : enter search criteria
FindContactDetailsPage -> exportContactDetailsController : call controller

$validateInput(exportContactDetailsController, exportContactDetailsValidator, FindContactDetailsTemplate, FindContactDetailsPage)

alt Court user selects search by trial
  exportContactDetailsController -> sendMessagesController : pass to send messages controller
  $genericAPICall(sendMessagesController, trialsListDAO, GenericErrorTemplate, "Failed to fetch trials")
  $renderTemplateToPage(sendMessagesController, SelectTrialTemplate, SelectTrialPage)
  alt User filters on trials
    Actor -> SelectTrialPage : filter on trials by trial number input field
    SelectTrialPage -> sendMessagesController : call controller to filter on trials
    $validateInput(sendMessagesController, trialSearchValidator, SelectTrialTemplate, SelectTrialPage)
    $genericAPICall(sendMessagesController, trialsListDAO, GenericErrorTemplate, "Failed to fetch trials")
    $renderTemplateToPage(sendMessagesController, SelectTrialTemplate, SelectTrialPage)
  end
  Actor -> SelectTrialPage : select trial and click 'Continue with selected'
  SelectTrialPage -> sendMessagesController : call controller
  exportContactDetailsController <- sendMessagesController : pass back to export contact details controller
end

exportContactDetailsController -> jurorSearchDAO : build request object
jurorSearchDAO -> BackendController : send backend request
jurorSearchDAO <- BackendController : ok or error response
exportContactDetailsController <- jurorSearchDAO : resolve request
$renderTemplateToPage(exportContactDetailsController, JurorsListTemplate, JurorsListPage)

alt User filters on jurors
  Actor -> JurorsListPage : filter on jurors using filter panel
  JurorsListPage -> exportContactDetailsController : call page controller
  exportContactDetailsController -> jurorSearchDAO : build request object
  jurorSearchDAO -> BackendController : send backend request
  jurorSearchDAO <- BackendController : ok or error response
  exportContactDetailsController <- jurorSearchDAO : resolve request
  $renderTemplateToPage(exportContactDetailsController, JurorsListTemplate, JurorsListPage)
end

Actor -> JurorsListPage : select juror(s)
JurorsListPage -> exportContactDetailsController : call page controller

alt User selects all jurors
  Actor -> JurorsListPage : click 'Select all' checkbox
  JurorsListPage -> exportContactDetailsController : call page controller
  $genericAPICall(exportContactDetailsController, jurorSearchDAO, GenericErrorTemplate, "Failed to check the juror to export contact details for")
end

Actor -> JurorsListPage : click 'Continue'
JurorsListPage -> exportContactDetailsController : call page controller

alt no jurors selected
  $renderErrorOnForm(exportContactDetailsController, JurorsListTemplate, JurorsListPage)
end

$renderTemplateToPage(exportContactDetailsController, DetailsToExportTemplate, DetailsToExportPage)

Actor -> DetailsToExportPage : confirm details to export
DetailsToExportPage -> exportContactDetailsController : call page controller
$validateInput(exportContactDetailsController, detailsToExportValidator, DetailsToExportTemplate, DetailsToExportPage)

$callAPIRenderErrorOnForm(exportContactDetailsController, downloadCSVDAO, GenericErrorTemplate, "Failed to download CSV", DetailsToExportTemplate, DetailsToExportPage)

Actor <- exportContactDetailsController : download CSV

@enduml