@startuml juror-update-postpone

skinparam Style strictuml 
skinparam SequenceMessageAlignment center

participant Actor

''' LOCAL ROUTING
participant JurorUpdatePage <</update>>
participant SelectDatePage <</postpone-date>>
participant AvailablePoolsPage <</available-pools>>
participant NoPoolsPage <</no-pools>>
participant JurorRecordOverviewPage <</overview>>
participant GenericErrorPage <</error>>

''' CONTROLLER AND REQUEST OBJECTS
participant JurorUpdateController <<juror-update.controller.js>>
participant JurorPostponeController <<postpone.controller.js>>
participant JurorRecordController <<juror-record.controller.js>>
participant JurorRecordObject <<record.get()>>
participant AvailablePoolsObject <<availablePools.post()>>
participant PostponeObject <<postponeObject.post()>>

''' TEMPLATES
participant JurorUpdateTemplate <<juror-management/update-juror-record.njk>>
participant SelectDateTemplate <<postpone/select-date.njk>>
participant AvailablePoolsTemplate <<postpone/pools.njk>>
participant NoPoolsTemplate <<postpone/no-pools.njk>>
participant GenericErrorTemplate <<_errors/generic.njk>>

''' FILTERS AND VALIDATORS
participant JurorUpdateValidator
participant PostponeDateValidator
participant PostponePoolValidator

''' BACKEND CONTROLLER
participant BackendController


Actor -> JurorUpdatePage : update juror record

JurorUpdatePage -> JurorUpdateController : call page controller

JurorUpdateController -> JurorRecordObject : build request object
JurorRecordObject -> BackendController : send backend request
JurorRecordObject <- BackendController : ok response
JurorUpdateController <- JurorRecordObject : resolve request

JurorUpdateController -> JurorUpdateTemplate : request and build template
JurorUpdateController <- JurorUpdateTemplate : return HTML
JurorUpdatePage <- JurorUpdateController : return HTML
Actor <- JurorUpdatePage : render HTML

alt Failed to retrieve juror record details
    JurorRecordObject <-- BackendController : error response
    JurorUpdateController <-- JurorRecordObject : reject requestObject
    JurorUpdatePage <-- JurorUpdateController : error response
    Actor <-- JurorUpdatePage : render error message
end

Actor -> JurorUpdatePage : Select postpone service start date
JurorUpdatePage -> JurorUpdateController : call page controller
JurorUpdateController -> JurorUpdateValidator : validate selection
JurorUpdateController <- JurorUpdateValidator : selection is valid

alt Update selection is missing
    JurorUpdateController <-- JurorUpdateValidator : decision is missing
    JurorUpdatePage <-- JurorUpdateController : error response
    Actor <-- JurorUpdatePage : render error message
end

JurorPostponeController -> SelectDateTemplate : request and build template
JurorPostponeController <- SelectDateTemplate : return HTML
SelectDatePage <- JurorPostponeController : return HTML
Actor <- SelectDatePage : render HTML

Actor -> SelectDatePage : Enter date to postpone to
SelectDatePage -> JurorPostponeController : call page controller
JurorPostponeController -> PostponeDateValidator : validate selection
JurorPostponeController <- PostponeDateValidator : selection is valid

alt Selected date is missing/invalid
    JurorPostponeController <-- PostponeDateValidator : Date is missing/invalid
    SelectDatePage <-- JurorPostponeController : error response
    Actor <-- SelectDatePage : render error message
end

JurorPostponeController -> AvailablePoolsObject : build request object
AvailablePoolsObject -> BackendController : send backend request
AvailablePoolsObject <- BackendController : ok response
JurorPostponeController <- AvailablePoolsObject : resolve request

JurorPostponeController -> AvailablePoolsTemplate : request and build template
JurorPostponeController <- AvailablePoolsTemplate : return HTML
AvailablePoolsPage <- JurorPostponeController : return HTML
Actor <- AvailablePoolsPage : render HTML

alt No pools available
    JurorPostponeController -> NoPoolsTemplate : request and build template
    JurorPostponeController <- NoPoolsTemplate : return HTML
    NoPoolsPage <- JurorPostponeController : return HTML
    Actor <- NoPoolsPage : render HTML
end

Actor -> AvailablePoolsPage : select a pool to transfer to
AvailablePoolsPage -> JurorPostponeController : call page controller
JurorPostponeController -> PostponePoolValidator : validate selection
JurorPostponeController <- PostponePoolValidator : selection is valid

alt Pool selection is empty
    JurorPostponeController <-- PostponePoolValidator : Pool is missing
    AvailablePoolsPage <- JurorPostponeController : error response
    Actor <-- AvailablePoolsPage : render error message
end

JurorPostponeController -> PostponeObject : build request object
PostponeObject -> BackendController : send backend request
PostponeObject <- BackendController : ok response
JurorPostponeController <- PostponeObject : resolve request

JurorPostponeController -> JurorRecordController
JurorRecordOverviewPage <- JurorRecordController : redirect to juror record page
Actor <- JurorRecordOverviewPage : render updated juror record page and display postponed banner

alt Failed to postpone juror
    PostponeObject <-- BackendController : error response
    JurorPostponeController <-- PostponeObject : reject requestObject
    
    JurorPostponeController -> GenericErrorTemplate : request and build template
    JurorPostponeController <- GenericErrorTemplate : return HTML
    GenericErrorPage <- JurorPostponeController : return HTML
    Actor <- GenericErrorPage : render HTML
end

@enduml


